##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# https://www.nginx.com/resources/wiki/start/
# https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/
# https://wiki.debian.org/Nginx/DirectoryStructure
#
# In most cases, administrators will remove this file from sites-enabled/ and
# leave it as reference inside of sites-available where it will continue to be
# updated by the nginx packaging team.
#
# This file will automatically load configuration files provided by other
# applications, such as Drupal or Wordpress. These applications will be made
# available underneath a path with that package name, such as /drupal8.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

# Default server configuration
#
proxy_cache_path  /var/www/covid19-neera-cache/  levels=1:2    keys_zone=COVIDNEERA:10m inactive=5m  max_size=100m;

server {
	listen 80 default_server;
	listen [::]:80 default_server;

	# SSL configuration
	#
	# listen 443 ssl default_server;
	# listen [::]:443 ssl default_server;
	#
	# Note: You should disable gzip for SSL traffic.
	# See: https://bugs.debian.org/773332
	#
	# Read up on ssl_ciphers to ensure a secure configuration.
	# See: https://bugs.debian.org/765782
	#
	# Self signed certs generated by the ssl-cert package
	# Don't use them in a production server!
	#
	# include snippets/snakeoil.conf;

	root /var/www/html;

	# Add index.php to the list if you are using PHP
	index index.html index.htm index.nginx-debian.html;

	server_name _;

	location / {
		# First attempt to serve request as file, then
		# as directory, then fall back to displaying a 404.
		try_files $uri $uri/ =404;
     if ($request_method = 'OPTIONS') {
        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
        #
        # Custom headers and headers various browsers *should* be OK with but aren't
        #
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
        #
        # Tell client that this pre-flight info is valid for 20 days
        #
        add_header 'Access-Control-Max-Age' 1728000;
        add_header 'Content-Type' 'text/plain; charset=utf-8';
        add_header 'Content-Length' 0;
        return 204;
     }
     if ($request_method = 'POST') {
        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
        add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';
     }
     if ($request_method = 'GET') {
        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
        add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';
     }
	}

	# pass PHP scripts to FastCGI server
	#
	#location ~ \.php$ {
	#	include snippets/fastcgi-php.conf;
	#
	#	# With php-fpm (or other unix sockets):
	#	fastcgi_pass unix:/var/run/php/php7.4-fpm.sock;
	#	# With php-cgi (or other tcp sockets):
	#	fastcgi_pass 127.0.0.1:9000;
	#}

	# deny access to .htaccess files, if Apache's document root
	# concurs with nginx's one
	#
	#location ~ /\.ht {
	#	deny all;
	#}
}


# Virtual Host configuration for example.com
#
# You can move that to a different file under sites-available/ and symlink that
# to sites-enabled/ to enable it.
#

server {
        server_name neera.ai;

        proxy_buffering        on;
        proxy_cache            COVIDNEERA;
        proxy_cache_valid      200  10m;
        proxy_cache_use_stale  error timeout invalid_header updating
                               http_500 http_502 http_503 http_504;

        add_header X-Cache-Status $upstream_cache_status;

        gzip_proxied any;
        gzip_types *;

        location /indexes {
                proxy_pass http://localhost:7700;

        }

        location /api/snippets {
                proxy_pass http://localhost:8000;

        }

        location /api/hn/search {
                # Put your static files in /var/www/app;
                # root /var/www/app;
                # Or run your frontend service on port 3000
                proxy_pass http://localhost:8000;
        }

        location /api/indexes {
                # Put your static files in /var/www/app;
                # root /var/www/app;
                # Or run your frontend service on port 3000
                proxy_pass http://localhost:5000;
        }

        location /api/ {
                # Put your static files in /var/www/app;
                # root /var/www/app;
                # Or run your frontend service on port 3000
                expires -1;
          	add_header 'Cache-Control' 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';

                proxy_pass http://localhost:5000;
        }

        location / {
                proxy_pass http://localhost:3000;
        }

    listen [::]:443 ssl ipv6only=on; # managed by Certbot
    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/neera.ai/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/neera.ai/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

}


server {
        server_name beta.neera.ai;

        gzip_proxied any;
        gzip_types *;


        location /api/ {
                # Put your static files in /var/www/app;
                # root /var/www/app;
                # Or run your frontend service on port 3000
                proxy_pass http://localhost:5111;
        }

        location / {
                proxy_pass http://localhost:3111;
        }


    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/beta.neera.ai/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/beta.neera.ai/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

}

server {
	server_name pocket.neera.ai;

	location / {
		proxy_pass http://localhost:5001;	
	}

    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/pocket.neera.ai/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/pocket.neera.ai/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

}

server {
    server_name notion.neera.ai;

    location / {
        proxy_pass http://localhost:6111;
    }


    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/notion.neera.ai/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/notion.neera.ai/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

}

server {
    server_name drive.neera.ai;

    location / {
        proxy_pass http://localhost:5050;
    }


    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/drive.neera.ai/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/drive.neera.ai/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

}

server {
    if ($host = neera.ai) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


        server_name neera.ai;
    listen 80;
    return 404; # managed by Certbot


}




server {
    if ($host = beta.neera.ai) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


        server_name beta.neera.ai;

    listen 80;
    return 404; # managed by Certbot


}


server {
    if ($host = pocket.neera.ai) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


	server_name pocket.neera.ai;

	listen 80;
    return 404; # managed by Certbot


}

server {
    if ($host = notion.neera.ai) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


    server_name notion.neera.ai;
    listen 80;
    return 404; # managed by Certbot


}

server {
    if ($host = drive.neera.ai) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


    server_name drive.neera.ai;
    listen 80;
    return 404; # managed by Certbot


}
